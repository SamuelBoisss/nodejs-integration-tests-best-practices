name: Node.js CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  # Job de build
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Read .nvmrc
      run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
      id: nvm

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"

    # Cache node_modules
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json', '**/.nvmrc') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    # Installer Docker Compose
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # Installer les dépendances avec npm ci
    - run: npm ci

  # Job de tests NestJS (en parallèle)
  test_nestjs:
    runs-on: ubuntu-latest
    needs: build  # Dépendance sur le job build pour s'assurer que le code est compilé et que les dépendances sont installées

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ needs.build.outputs.NVMRC }}"  # Utiliser la même version de Node.js que pour le build

    - run: npm run test:nestjs  # Exécution des tests NestJS

  # Job de tests Mocha (en parallèle)
  test_mocha:
    runs-on: ubuntu-latest
    needs: build  # Dépendance sur le job build

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ needs.build.outputs.NVMRC }}"  # Utiliser la même version de Node.js que pour le build

    - run: npm run test:mocha  # Exécution des tests Mocha
